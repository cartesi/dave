// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

//! Defines the [struct@Hash] type.

use std::fmt::Display;

type Digest = [u8; 32];

/// Digest generated by a hash function.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Hash(Digest);

impl Display for Hash {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "0x{}", hex::encode(self.0))
    }
}

impl Hash {
    pub fn as_ptr(&self) -> *const Digest {
        &self.0
    }

    /// Create a new hash from a byte array.
    pub fn new(hash: Digest) -> Self {
        Self(hash)
    }

    /// Get the byte array representation of this hash.
    pub fn as_bytes(&self) -> &[u8] {
        &self.0
    }
}
