// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

pragma solidity ^0.8.0;

import {MerkleConstants} from "./MerkleConstants.sol";

library PristineMerkleTree {
    /// @notice The nodes of the pristine Merkle tree in bottom-up order,
    /// tightly packed into a single byte array
    bytes constant NODES =
        hex"290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8ecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2dadefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eeade1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e107ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82e026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e836365163d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409cad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203ea2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c8622def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10776a31db34a1a0a7caaf862cffdfff1789297ffadc380bd3d39281d340abd3ade2e7610b87a5fdf3a72ebe271287d923ab990eefac64b6e59d79f8b7e08c46e3504364a5c6858bf98fff714ab5be9de19ed31a976860efbd0e772a2efe23e2e04f05f4acb83f5b65168d9fef89d56d4d77b8944015e6b1eed81b0238e2d0dba344a6d974c75b07423e1d6d33f481916fdd45830aea11b6347e700cd8b9f0767cedf260291f734ddac396a956127dde4c34c0cfb8d8052f88ac139658ccf2d5076075c657a105351e7f0fce53bc320113324a522e8fd52dc878c762551e01a46e6ca6a3f763a9395f7da16014725ca7ee17e4815c0ff8119bf33f273dee11833b1c25ef10ffeb3c7d08aa707d17286e0b0d3cbcb50f1bd3b6523b63ba3b52dd0ffffc43bd08273ccf135fd3cacbeef055418e09eb728d727c4d5d5c556cdea7e3c5ab8111456b1f28f3c7a0a604b4553ce905cb019c463ee159137af83c350b220ff273fcbf4ae0f2bd88d6cf319ff4004f8d7dca70d4ced4e74d2c74139739e67fa06ba11241ddd5efdc65d4e39c9f6991b74fd4b81b62230808216c876f827c7e275adf313a996c7e2950cac67caba02a5ff925ebf9906b58949f3e77aec5b98f6162fa308d2b3a15dc33cffac85f13ab349173121645aedf00f471663108be78ccaaab73373552f207a63599de54d7d8d0c1805f86ce7da15818d09f4cff62cf277fb80a82478460e8988570b718f1e083ceb76f7e271a1a1497e5975f53ae4bf6ffa2bc131204513289738567a68fa9f4827dac7fd3b3d1f2e94777d57f36b49d61e8c2c894e12486176ab8f4d7069d6692fa6495541567872e7ecbddb726202b1014739f29b1d905d630ddeb8560a32bf23e666c8a1523a4a600227fef7c9e1d1ce5cdca9cdf40fa5786548b58eb19ddfd32395b4582983919099dbd153113784d01e2fae904de62c6fbf9776979ca7a2777ae2632ee278d19aca30f890e68c477f83a13a000ad2b5b3e50375b7c3ae782d987ba4b5a65376bbb97469fb371e37864edf08740d592362cd24d0db067bf14cd3b97bd2a68e782adffb4365588d0cc35e8abe7d6524569be8aa1a48bb23362326fdfefe961348bc96091c94c8545f2c1afdace5d87f06ce1d44bc0a2691aea4414d0ad640be0d9879c8374d92360c4480d69879eadd7ae508409f2f0ba83a2b0fe0da57b40008c064d2c397d31763a8e1dedb15ad0c8b88d437fef835aeb958292644810663dc1756550f22bfa4c9b1172ab5afebd159573e19e25169975242e10a2ed38dfc805232fb50a643528594d65e9525233b39587174bcf0bba562d95b50b429914c7e0e8a9ae58f91765922797ba721e8937c7470a26d5c2f141f3d4106447dab171fced7d652a69f0573e660ba01cff272a1c6f7927d73c94c85d380a84399867626d6429d48bae31682c19f715cd317da1a553ce384de6902fe26032fecc7de03e40502af05dced50c6062bfcd7bbd0dbd68d1ddeeae095485720a1ce334e9e5e5153066f42260e0bcfbd03fa4a619a5bc3cae15404f39b4b7bf5ddd5161ea642d13d23baef545acb98b6fb1a5fdae0a5718d0b812e1de1412e44d875146acc1a7f7c3916c003abb1ff291eb2e614a661d6730b502bae2bde112958cee698478845a1bb3788a6b9a91f4c19545d6cd9720d4736591fe70edcf3e33cb2e56f21fdc1244f3d2ef6dbdf82c7d252d69c64bd6fa8ee66ad9d30241016981e4580e3c2edc4804b7523663bc3b9e8340ab48a66828d7d9d7d5be2f5f280665196d25a39c4d01345cb95ea962e4bd7d1f316f845784e115ff103530d85f9dfacd638ad45fbe938ba85c40b3f100a0f506f6a6c86c10f107ab4811ddc76f72516fcdfa8a0c9bd71ff912abe7e8dbc3898515970ca6fce19039ca22ae2638e44b24641fd61048b94dc2be2531d0f66ab43019856780cb246cfd37b0c190d17111d5c016f19ba715ee622dc5";

    /// @notice Gets a node from a certain height of the pristine Merkle tree
    /// @param height the node height (0 = leaf, MerkleConstants.TREE_HEIGHT = root)
    function getNodeAtHeight(uint256 height) internal pure returns (bytes32 node) {
        require(height <= MerkleConstants.TREE_HEIGHT, "Height out of bounds");
        uint256 start = height * MerkleConstants.HASH_SIZE;
        bytes memory nodes = NODES;
        assembly {
            node := mload(add(add(nodes, 0x20), start))
        }
    }
}
